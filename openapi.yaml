openapi: 3.0.3
info:
  title: Swagger CoolZoo - OpenAPI 3.0
  description: |-
    
    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: coolzoo
    description: Everything about zoo
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Все заказы билетов зоопарка
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /animals/display:
    get:
      tags:
        - animals
      summary: отобразить всех зверей
      description: отобразить всех зверей по ответу с сервера
      operationId: displayAnimals
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animals'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Animals'
        '400':
          description: Invalid ID supplied
        '404':
          description: Animal not found
        '422':
          description: Validation exception
  /store/tickets/order:
    post:
      tags:
        - store
      summary: Покупка билета
      description: Размещение заказа на покупку билета
      operationId: placeTicketOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrdersResponse'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /store/tickets/price:
    get:
      tags:
        - store
      summary: Получение актуальной цены
      description: Получение актуальной цены
      operationId: getTicketPrice
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypePrices'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TicketTypePrices'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    post:
      tags:
        - store
      summary: Изменение актуальной цены
      description: Изменение актуальной цены
      operationId: changeTicketPrice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketTypePrices'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypePrices'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TicketTypePrices'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    Ticket:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
          example: 7
        price:
          type: number
          example: 100
        ticketType:
          $ref: '#/components/schemas/TicketType'  
      xml:
        name: order
    TicketType:
          type: string
          example: adult
          enum:
          - child
          - adult   
    TicketInfo:
      properties:
        ticketType:
          type: string
          example: adult
          enum:
            - child
            - adult 
        quantity:
          type: integer
          example: 5
    TicketTypePrice:
      properties:
        ticketType:
          type: string
          example: adult
          enum:
            - child
            - adult 
        price:
          type: number
          example: 99.123
    TicketTypePrices:
      required:
        - name
      type: array
      items: 
        anyOf: 
          - $ref: '#/components/schemas/TicketTypePrice'
    CreateOrdersResponse:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 100500
        purchaseDate:
          type: string
          format: date-time
        sum: 
          type: integer
          format: int64
          example: 100500
        tickets:
          type: array
          items: 
            oneOf:
            - $ref: '#/components/schemas/Ticket'
    CreateOrderRequest:
      type: object
      properties:
        userId: 
          type: integer
          format: int64
          example: 100500
        ticketInfo:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TicketInfo'  
    Animal:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 10
        name:
          type: string
          example: Мыша
        description:
          type: string
          description: Animal description
          example: Большая мыша
        age:
          type: integer
          format: uint32
          example: 5
        gender: 
          type: string
          example: female
          enum:
            - male
            - female
        category:
          type: string
          example: rat
          enum:
            - cat
            - dog
            - rat
      xml:
        name: Animal
    Animals:
      required:
        - name
      type: array
      items: 
        anyOf: 
          - $ref: '#/components/schemas/Animal'
      xml:
        name: Animals
  requestBodies:
    Animal:
      description: Animal object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Animal'
        application/xml:
          schema:
            $ref: '#/components/schemas/Animal'